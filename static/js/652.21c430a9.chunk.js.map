{"version":3,"file":"static/js/652.21c430a9.chunk.js","mappings":"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","sources":["mocks/handlers.ts","mocks/browser.ts"],"sourcesContent":["import faker from '@faker-js/faker'\nimport { differenceInCalendarDays } from 'date-fns'\nimport { rest } from 'msw'\nimport * as Data from '../Data'\nimport { isBagCountValid, isDateRangeValid } from '../util'\n\nconst generateStashpoint = (): Data.Stashpoint => {\n  return {\n    address: faker.address.streetAddress(true),\n    bagPerDayPrice: BigInt(faker.datatype.number({ min: 4, max: 7 })),\n    currencyCode: 'GBP',\n    id: faker.datatype.uuid(),\n    name: faker.company.companyName(),\n    rating: faker.datatype.number({ min: 0, max: 5, precision: 0.1 }),\n  }\n}\n\nconst generateStashpoints = (totalStashpoints: number): Data.Stashpoints => {\n  return Array.from({ length: totalStashpoints }).map(generateStashpoint)\n}\n\nconst generatePriceQuote = (data: {\n  readonly bagCount: number\n  readonly dateRange: Data.DateRange\n  readonly stashpoint: Data.Stashpoint\n}): Data.PriceQuote => {\n  const { bagCount, dateRange, stashpoint } = data\n\n  return {\n    bagCount,\n    currencyCode: stashpoint.currencyCode,\n    dateRange,\n    stashpointId: stashpoint.id,\n    totalPrice:\n      stashpoint.bagPerDayPrice *\n      BigInt(bagCount) *\n      BigInt(differenceInCalendarDays(dateRange.to, dateRange.from)),\n  }\n}\n\nconst generateBooking = (data: {\n  readonly bagCount: number\n  readonly dateRange: Data.DateRange\n  readonly stashpoint: Data.Stashpoint\n}): Data.Booking => {\n  const { bagCount, dateRange, stashpoint } = data\n\n  return {\n    bagCount,\n    currencyCode: stashpoint.currencyCode,\n    dateRange,\n    id: faker.datatype.uuid(),\n    stashpoint: stashpoint,\n    totalPrice:\n      stashpoint.bagPerDayPrice *\n      BigInt(bagCount) *\n      BigInt(differenceInCalendarDays(dateRange.to, dateRange.from)),\n  }\n}\n\nconst stashpoints = generateStashpoints(50)\n\nconst bookings: Data.Booking[] = []\n\nexport const devHandlers = [\n  rest.get<never, never, Data.StashpointsEncoded>(\n    '/api/stashpoints',\n    (_req, res, ctx) => {\n      return res(\n        ctx.delay('real'),\n        ctx.status(200),\n        ctx.json(Data.Stashpoints.encode(stashpoints)),\n      )\n    },\n  ),\n\n  rest.post<\n    {\n      readonly bagCount: number\n      readonly dateRange: Data.DateRangeEncoded\n      readonly stashpointId: string\n    },\n    never,\n    Data.PriceQuoteEncoded | { readonly error: { readonly code: string } }\n  >('/api/quotes', (req, res, ctx) => {\n    const { bagCount, dateRange: dateRangeEncoded, stashpointId } = req.body\n\n    if (!isBagCountValid(bagCount)) {\n      return res(\n        ctx.delay('real'),\n        ctx.status(422),\n        ctx.json({ error: { code: 'INVALID_BAG_COUNT' } }),\n      )\n    }\n\n    const [error, dateRange] = Data.DateRange.decode(dateRangeEncoded)\n\n    if (error !== undefined || !isDateRangeValid(dateRange)) {\n      return res(\n        ctx.delay('real'),\n        ctx.status(422),\n        ctx.json({ error: { code: 'INVALID_DATE_RANGE' } }),\n      )\n    }\n\n    const stashpoint = stashpoints.find(({ id }) => id === stashpointId)\n\n    if (stashpoint === undefined) {\n      return res(\n        ctx.delay('real'),\n        ctx.status(404),\n        ctx.json({ error: { code: 'NOT_FOUND' } }),\n      )\n    }\n\n    const priceQuote = generatePriceQuote({ bagCount, dateRange, stashpoint })\n\n    return res(\n      ctx.delay('real'),\n      ctx.status(200),\n      ctx.json(Data.PriceQuote.encode(priceQuote)),\n    )\n  }),\n\n  rest.post<\n    {\n      readonly bagCount: number\n      readonly dateRange: Data.DateRangeEncoded\n      readonly stashpointId: string\n    },\n    never,\n    Data.BookingEncoded | { readonly error: { readonly code: string } }\n  >('/api/bookings', (req, res, ctx) => {\n    const { bagCount, dateRange: dateRangeEncoded, stashpointId } = req.body\n\n    if (!isBagCountValid(bagCount)) {\n      return res(\n        ctx.delay('real'),\n        ctx.status(422),\n        ctx.json({ error: { code: 'INVALID_BAG_COUNT' } }),\n      )\n    }\n\n    const [error, dateRange] = Data.DateRange.decode(dateRangeEncoded)\n\n    if (error !== undefined || !isDateRangeValid(dateRange)) {\n      return res(\n        ctx.delay('real'),\n        ctx.status(422),\n        ctx.json({ error: { code: 'INVALID_DATE_RANGE' } }),\n      )\n    }\n\n    const stashpoint = stashpoints.find(({ id }) => id === stashpointId)\n\n    if (stashpoint === undefined) {\n      return res(\n        ctx.delay('real'),\n        ctx.status(404),\n        ctx.json({ error: { code: 'NOT_FOUND' } }),\n      )\n    }\n\n    const booking = generateBooking({ bagCount, dateRange, stashpoint })\n\n    bookings.push(booking)\n\n    return res(\n      ctx.delay('real'),\n      ctx.status(200),\n      ctx.json(Data.Booking.encode(booking)),\n    )\n  }),\n\n  rest.post<\n    { readonly bookingId: string },\n    never,\n    Data.PaymentEncoded | { readonly error: { readonly code: string } }\n  >('/api/payments', (req, res, ctx) => {\n    const { bookingId } = req.body\n\n    const booking = bookings.find(({ id }) => id === bookingId)\n\n    if (booking === undefined) {\n      return res(\n        ctx.delay('real'),\n        ctx.status(404),\n        ctx.json({ error: { code: 'NOT_FOUND' } }),\n      )\n    }\n\n    return res(\n      ctx.delay('real'),\n      ctx.status(200),\n      ctx.json(Data.Payment.encode({ id: faker.datatype.uuid() })),\n    )\n  }),\n]\n\nexport const testHandlers = []\n","import { setupWorker } from 'msw'\nimport { devHandlers } from './handlers'\n\nexport const worker = setupWorker(...devHandlers)\n"],"names":["totalStashpoints","generateStashpoint","address","faker","bagPerDayPrice","BigInt","min","max","currencyCode","id","name","rating","precision","stashpoints","Array","from","length","map","bookings","devHandlers","rest","_req","res","ctx","delay","status","json","Data","req","body","bagCount","dateRangeEncoded","dateRange","stashpointId","isBagCountValid","error","code","undefined","isDateRangeValid","stashpoint","find","priceQuote","data","totalPrice","differenceInCalendarDays","to","generatePriceQuote","booking","generateBooking","push","bookingId","worker","setupWorker"],"sourceRoot":""}